CALL osae_sp_object_type_add ('W800RF','W800RF Plugin','','PLUGIN',1,1,0,1,'W800RF Plugin');
CALL osae_sp_object_type_state_add('W800RF','ON','Running','W800RF Plugin is Running');
CALL osae_sp_object_type_state_add('W800RF','OFF','Stopped','W800RF Plugin is Stopped');
CALL osae_sp_object_type_state_add('W800RF','ERROR','Error','W800RF Plugin is Errored');
CALL osae_sp_object_type_event_add('W800RF','ON','Started','W800RF Plugin Started');
CALL osae_sp_object_type_event_add('W800RF','OFF','Stopped','W800RF Plugin Stopped');
CALL osae_sp_object_type_method_add('W800RF','ON','Start','','','','','Start the W800RF Plugin');
CALL osae_sp_object_type_method_add('W800RF','OFF','Stop','','','','','Stop the W800RF Plugin');
CALL osae_sp_object_type_method_add('W800RF','SET PORT','Set ComPort','ComPort','','4','','Set ComPort');
CALL osae_sp_object_type_method_add('W800RF','SET DEBOUNCE','Set Debounce','Inteval in ms','','90','','Set Debounce');
CALL osae_sp_object_type_method_add('W800RF','SET LEARNING MODE','Set Learning Mode','True/False','','TRUE','','Set Learning Mode');
CALL osae_sp_object_type_property_add('W800RF','Port','Integer','','',0,1,'Port');
CALL osae_sp_object_type_property_add('W800RF','Learning Mode','Boolean','','FALSE',0,1,'Learning Mode');
CALL osae_sp_object_type_property_add('W800RF','Debounce','Integer','','800',0,1,'Debounce');
CALL osae_sp_object_type_property_add('W800RF','System Plugin','Boolean','','FALSE',0,1,'System Plugin');
CALL osae_sp_object_type_property_add('W800RF','Debug','Boolean','','FALSE',0,1,'Use Debug to show extra logs');
CALL osae_sp_object_type_property_add('W800RF','Trust Level','Integer','','90',0,1,'W800RF plugin Trust Level');
CALL osae_sp_object_type_property_add('W800RF','Version','String','','',0,1,'Version of the W800RF plugin');
CALL osae_sp_object_type_property_add('W800RF','Author','String','','',0,1,'Author of the W800RF plugin');

CALL osae_sp_object_type_add ('X10 DS10A OC','X10 DS10A OC','','SENSOR',0,0,0,1,'X10 DS10A OC');
CALL osae_sp_object_type_state_add('X10 DS10A OC','ON','Opened','Opened');
CALL osae_sp_object_type_state_add('X10 DS10A OC','OFF','Closed','Closed');
CALL osae_sp_object_type_event_add('X10 DS10A OC','ON','Opened','Opened');
CALL osae_sp_object_type_event_add('X10 DS10A OC','OFF','Closed','Closed');

CALL osae_sp_object_type_add ('X10 DS10A','X10 DS10A','','SENSOR',0,0,0,1,'X10 DS10A');
CALL osae_sp_object_type_state_add('X10 DS10A','ON','On','On');
CALL osae_sp_object_type_state_add('X10 DS10A','OFF','Off','Off');
CALL osae_sp_object_type_event_add('X10 DS10A','ON','On','On');
CALL osae_sp_object_type_event_add('X10 DS10A','OFF','Off','Off');

CALL osae_sp_object_type_add ('X10 DIMMER','X10 Dimmer','','SWITCH',0,0,0,0,'X10 Dimmer');
CALL osae_sp_object_type_state_add('X10 DIMMER','ON','On','On');
CALL osae_sp_object_type_state_add('X10 DIMMER','OFF','Off','Off');
CALL osae_sp_object_type_event_add('X10 DIMMER','ON','On','On');
CALL osae_sp_object_type_event_add('X10 DIMMER','OFF','Off','Off');
CALL osae_sp_object_type_method_add('X10 DIMMER','ON','On','Dim Level in %','','100','','Turn On');
CALL osae_sp_object_type_method_add('X10 DIMMER','OFF','Off','','','','','Turn Off');
CALL osae_sp_object_type_method_add('X10 DIMMER','BRIGHT','Bright','Increment %','','10','','Bright');
CALL osae_sp_object_type_method_add('X10 DIMMER','DIM','Dim','Decrement %','','10','','Dim');
CALL osae_sp_object_type_property_add('X10 DIMMER','Off Timer','Integer','','-1',0,1,'# of seconds after activity until device turns off');
CALL osae_sp_object_type_property_add('X10 DIMMER','Level','Integer','','0',0,0,'Dim Level 0-100%');
CALL osae_sp_object_type_property_add('X10 DIMMER','Soft Start','Boolean','','FALSE',0,0,'Soft Start');

CALL osae_sp_object_type_add ('X10 RELAY','X10 Relay','','SWITCH',0,0,0,0,'X10 Relay');
CALL osae_sp_object_type_state_add('X10 RELAY','ON','On','On');
CALL osae_sp_object_type_state_add('X10 RELAY','OFF','Off','Off');
CALL osae_sp_object_type_event_add('X10 RELAY','ON','On','On');
CALL osae_sp_object_type_event_add('X10 RELAY','OFF','Off','Off');
CALL osae_sp_object_type_method_add('X10 RELAY','ON','On','','','','','Turn On');
CALL osae_sp_object_type_method_add('X10 RELAY','OFF','Off','','','','','Turn Off');
CALL osae_sp_object_type_property_add('X10 RELAY','Off Timer','Integer','','-1',0,1,'# of seconds after activity until device turns off');
CALL osae_sp_object_type_property_add('X10 RELAY','Soft Start','Boolean','','FALSE',0,1,'Soft Start');

CALL osae_sp_object_type_add ('X10 SENSOR','X10 Sensor','','SENSOR',0,0,0,0,'X10 Sensor');
CALL osae_sp_object_type_state_add('X10 SENSOR','ON','On','On');
CALL osae_sp_object_type_state_add('X10 SENSOR','OFF','Off','Off');
CALL osae_sp_object_type_event_add('X10 SENSOR','ON','On','On');
CALL osae_sp_object_type_event_add('X10 SENSOR','OFF','Off','Off');
CALL osae_sp_object_type_property_add('X10 SENSOR','Off Timer','Integer','','-1',0,1,'Off Timer');
CALL osae_sp_object_type_property_add('X10 SENSOR','Level','Integer','','0',0,0,'Level');

CALL osae_sp_object_type_add ('X10 PHOTOCELL','X10 Photocell','','SENSOR',0,0,0,0,'X10 Photocell');
CALL osae_sp_object_type_state_add('X10 PHOTOCELL','ON','Dark','Dark');
CALL osae_sp_object_type_state_add('X10 PHOTOCELL','OFF','Light','Light');
CALL osae_sp_object_type_event_add('X10 PHOTOCELL','ON','Dark','Dark');
CALL osae_sp_object_type_event_add('X10 PHOTOCELL','OFF','Light','Light');
CALL osae_sp_object_type_property_add('X10 PHOTOCELL','Off Timer','Integer','','-1',0,1,'Off Timer');
CALL osae_sp_object_type_property_add('X10 PHOTOCELL','Level','Integer','','0',1,'Level');